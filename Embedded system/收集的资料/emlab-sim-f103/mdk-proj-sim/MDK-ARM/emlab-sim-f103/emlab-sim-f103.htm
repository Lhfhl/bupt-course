<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [emlab-sim-f103\emlab-sim-f103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image emlab-sim-f103\emlab-sim-f103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Dec 07 11:45:17 2022
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
audio_write &rArr; beep_set &rArr; pwm_set &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">DMA1_Channel2_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">DMA1_Channel3_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from kern_port_cm3_ccarm.o(.emb_text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from syscall.o(.emb_text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[1d]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4b]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[4e]">UART_DMAError</a> from stm32f1xx_hal_uart.o(i.UART_DMAError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[4e]">UART_DMAError</a> from stm32f1xx_hal_uart.o(i.UART_DMAError) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[4f]">UART_DMAReceiveCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[50]">UART_DMARxHalfCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[4c]">UART_DMATransmitCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[4d]">UART_DMATxHalfCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[40]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from stm32f1xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[45]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[49]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[48]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[6f]">adder_task</a> from kern_test.o(i.adder_task) referenced from kern_test.o(i.mutex_test_task)
 <LI><a href="#[77]">audio_close</a> from project4_main.o(i.audio_close) referenced from project4_main.o(i.player_init)
 <LI><a href="#[78]">audio_control</a> from project4_main.o(i.audio_control) referenced from project4_main.o(i.player_init)
 <LI><a href="#[75]">audio_init</a> from project4_main.o(i.audio_init) referenced from project4_main.o(i.player_init)
 <LI><a href="#[76]">audio_open</a> from project4_main.o(i.audio_open) referenced from project4_main.o(i.player_init)
 <LI><a href="#[79]">audio_write</a> from project4_main.o(i.audio_write) referenced from project4_main.o(i.player_init)
 <LI><a href="#[72]">beep_song_decode_init</a> from decode.o(i.beep_song_decode_init) referenced from project4_main.o(i.player_init)
 <LI><a href="#[69]">btn_cb</a> from key.o(i.btn_cb) referenced from key.o(i.key_init)
 <LI><a href="#[7e]">button_scan_task</a> from project2_main.o(i.button_scan_task) referenced from project2_main.o(i.project2_main)
 <LI><a href="#[d]">cmd_d</a> from kshell_cmd.o(i.cmd_d) referenced 2 times from kshell_cmd.o(.data)
 <LI><a href="#[c]">cmd_help</a> from kshell_cmd.o(i.cmd_help) referenced 4 times from kshell_cmd.o(.data)
 <LI><a href="#[e]">cmd_i</a> from kshell_cmd.o(i.cmd_i) referenced 2 times from kshell_cmd.o(.data)
 <LI><a href="#[6e]">cmd_prj</a> from app_n103.o(i.cmd_prj) referenced from app_n103.o(i.lab_init)
 <LI><a href="#[10]">cmd_reboot</a> from kshell_cmd.o(i.cmd_reboot) referenced 2 times from kshell_cmd.o(.data)
 <LI><a href="#[f]">cmd_sleep</a> from kshell_cmd.o(i.cmd_sleep) referenced 2 times from kshell_cmd.o(.data)
 <LI><a href="#[51]">cmd_smoke</a> from app_n103.o(i.cmd_smoke) referenced from app_n103.o(i.app_main)
 <LI><a href="#[80]">cmd_uartmode</a> from project3_main.o(i.cmd_uartmode) referenced from project3_main.o(i.project3_main)
 <LI><a href="#[73]">decode_control</a> from project4_main.o(i.decode_control) referenced from project4_main.o(i.player_init)
 <LI><a href="#[74]">decode_read</a> from project4_main.o(i.decode_read) referenced from project4_main.o(i.player_init)
 <LI><a href="#[7c]">fork_test_task</a> from project1_main.o(i.fork_test_task) referenced from project1_main.o(i.project1_main)
 <LI><a href="#[6b]">getc_default</a> from kshell.o(i.getc_default) referenced from kshell.o(i.kshell_lib_init)
 <LI><a href="#[84]">idle_task_entry</a> from task.o(i.idle_task_entry) referenced from task.o(i.task_lib_init)
 <LI><a href="#[64]">kern_test</a> from kern_test.o(i.kern_test) referenced from kern_test.o(i.kern_test_init)
 <LI><a href="#[b]">kern_testcase</a> from kern_test.o(i.kern_testcase) referenced 2 times from kern_test.o(.data)
 <LI><a href="#[6c]">kshell_task</a> from kshell.o(i.kshell_task) referenced from kshell.o(i.kshell_lib_init)
 <LI><a href="#[6d]">ktest_run_engine</a> from ktest.o(i.ktest_run_engine) referenced from ktest.o(i.ktest_run_test_suite)
 <LI><a href="#[7f]">led_blink_task</a> from project2_main.o(i.led_blink_task) referenced from project2_main.o(i.project2_main)
 <LI><a href="#[86]">mutex_test_task</a> from kern_test.o(i.mutex_test_task) referenced from kern_test.o(i.test_mutex)
 <LI><a href="#[71]">my_button_scan</a> from button.o(i.my_button_scan) referenced from button.o(i.my_button_start)
 <LI><a href="#[7a]">player_entry</a> from player.o(i.player_entry) referenced from player.o(i.player_start)
 <LI><a href="#[7d]">priv_test_task</a> from project1_main.o(i.priv_test_task) referenced from project1_main.o(i.project1_main)
 <LI><a href="#[67]">process_event</a> from project2_main.o(i.process_event) referenced from project2_main.o(i.key_button_init)
 <LI><a href="#[6]">project1_main</a> from project1_main.o(i.project1_main) referenced 2 times from app_n103.o(.data)
 <LI><a href="#[7]">project2_main</a> from project2_main.o(i.project2_main) referenced 2 times from app_n103.o(.data)
 <LI><a href="#[8]">project3_main</a> from project3_main.o(i.project3_main) referenced 2 times from app_n103.o(.data)
 <LI><a href="#[9]">project4_main</a> from project4_main.o(i.project4_main) referenced 2 times from app_n103.o(.data)
 <LI><a href="#[5]">project_list</a> from app_n103.o(i.project_list) referenced 2 times from app_n103.o(.data)
 <LI><a href="#[6a]">putc_default</a> from kshell.o(i.putc_default) referenced from kshell.o(i.kshell_lib_init)
 <LI><a href="#[68]">read_key</a> from project2_main.o(i.read_key) referenced from project2_main.o(i.key_button_init)
 <LI><a href="#[81]">sem_consumer</a> from kern_test.o(i.sem_consumer) referenced from kern_test.o(i.sem_test)
 <LI><a href="#[82]">sem_producer</a> from kern_test.o(i.sem_producer) referenced from kern_test.o(i.sem_test)
 <LI><a href="#[53]">smoke_task</a> from app_n103.o(i.smoke_task) referenced from app_n103.o(i.cmd_smoke)
 <LI><a href="#[5c]">stm32_pin_close</a> from pin_driver.o(i.stm32_pin_close) referenced from pin_driver.o(i.driver_pin_init)
 <LI><a href="#[5f]">stm32_pin_ioctl</a> from pin_driver.o(i.stm32_pin_ioctl) referenced from pin_driver.o(i.driver_pin_init)
 <LI><a href="#[5b]">stm32_pin_open</a> from pin_driver.o(i.stm32_pin_open) referenced from pin_driver.o(i.driver_pin_init)
 <LI><a href="#[5d]">stm32_pin_read</a> from pin_driver.o(i.stm32_pin_read) referenced from pin_driver.o(i.driver_pin_init)
 <LI><a href="#[5e]">stm32_pin_write</a> from pin_driver.o(i.stm32_pin_write) referenced from pin_driver.o(i.driver_pin_init)
 <LI><a href="#[62]">stm32_pwm_close</a> from pwm_driver.o(i.stm32_pwm_close) referenced from pwm_driver.o(i.driver_pwm_init)
 <LI><a href="#[63]">stm32_pwm_ioctl</a> from pwm_driver.o(i.stm32_pwm_ioctl) referenced from pwm_driver.o(i.driver_pwm_init)
 <LI><a href="#[60]">stm32_pwm_open</a> from pwm_driver.o(i.stm32_pwm_open) referenced from pwm_driver.o(i.driver_pwm_init)
 <LI><a href="#[61]">stm32_pwm_write</a> from pwm_driver.o(i.stm32_pwm_write) referenced from pwm_driver.o(i.driver_pwm_init)
 <LI><a href="#[52]">stop_smoke</a> from app_n103.o(i.stop_smoke) referenced from app_n103.o(i.cmd_smoke)
 <LI><a href="#[70]">stop_task</a> from kern_test.o(i.stop_task) referenced from kern_test.o(i.mutex_test_task)
 <LI><a href="#[8a]">sys_call_test</a> from syscall.o(i.sys_call_test) referenced from syscall.o(.constdata)
 <LI><a href="#[89]">sys_fork</a> from syscall.o(i.sys_fork) referenced from syscall.o(.constdata)
 <LI><a href="#[88]">sys_system_call</a> from syscall.o(i.sys_system_call) referenced from syscall.o(.constdata)
 <LI><a href="#[5a]">task_error</a> from kern_port_cm3.o(i.task_error) referenced from kern_port_cm3.o(i.cpu_task_stack_prepair)
 <LI><a href="#[83]">task_guard</a> from task.o(i.task_guard) referenced from task.o(i.task_create)
 <LI><a href="#[65]">test_mutex</a> from kern_test.o(i.test_mutex) referenced from kern_test.o(i.kern_testcase)
 <LI><a href="#[66]">test_sem</a> from kern_test.o(i.test_sem) referenced from kern_test.o(i.kern_testcase)
 <LI><a href="#[87]">timer_tick_task</a> from timer.o(i.timer_tick_task) referenced from timer.o(i.timer_lib_init)
 <LI><a href="#[87]">timer_tick_task</a> from timer.o(i.timer_tick_task) referenced from timer.o(i.timer_tick_isr)
 <LI><a href="#[87]">timer_tick_task</a> from timer.o(i.timer_tick_task) referenced from timer.o(i.timer_tick_task)
 <LI><a href="#[7b]">trace_printf</a> from board_itm.o(i.trace_printf) referenced from project1_main.o(i.project1_main)
 <LI><a href="#[59]">uart_getc_DMA</a> from project3_main.o(i.uart_getc_DMA) referenced from project3_main.o(i.cmd_uartmode)
 <LI><a href="#[59]">uart_getc_DMA</a> from project3_main.o(i.uart_getc_DMA) referenced from project3_main.o(i.kshell_config)
 <LI><a href="#[57]">uart_getc_IT</a> from project3_main.o(i.uart_getc_IT) referenced from project3_main.o(i.cmd_uartmode)
 <LI><a href="#[57]">uart_getc_IT</a> from project3_main.o(i.uart_getc_IT) referenced from project3_main.o(i.kshell_config)
 <LI><a href="#[55]">uart_getc_poll</a> from project3_main.o(i.uart_getc_poll) referenced from project3_main.o(i.cmd_uartmode)
 <LI><a href="#[55]">uart_getc_poll</a> from project3_main.o(i.uart_getc_poll) referenced from project3_main.o(i.kshell_config)
 <LI><a href="#[58]">uart_putc_DMA</a> from project3_main.o(i.uart_putc_DMA) referenced from project3_main.o(i.cmd_uartmode)
 <LI><a href="#[58]">uart_putc_DMA</a> from project3_main.o(i.uart_putc_DMA) referenced from project3_main.o(i.kshell_config)
 <LI><a href="#[56]">uart_putc_IT</a> from project3_main.o(i.uart_putc_IT) referenced from project3_main.o(i.cmd_uartmode)
 <LI><a href="#[56]">uart_putc_IT</a> from project3_main.o(i.uart_putc_IT) referenced from project3_main.o(i.kshell_config)
 <LI><a href="#[54]">uart_putc_poll</a> from project3_main.o(i.uart_putc_poll) referenced from project3_main.o(i.cmd_uartmode)
 <LI><a href="#[54]">uart_putc_poll</a> from project3_main.o(i.uart_putc_poll) referenced from project3_main.o(i.kshell_config)
 <LI><a href="#[a]">unit_test_noop</a> from kern_test.o(i.unit_test_noop) referenced 4 times from kern_test.o(.data)
 <LI><a href="#[85]">wait_timeout_handler</a> from timer.o(i.wait_timeout_handler) referenced from timer.o(i.task_wait_timeout)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[238]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[239]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[23a]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[23b]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[23c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8f]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[e2]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[91]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[93]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[95]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[97]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[23d]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[99]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9d]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[9f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a1]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a4]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a5]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[a7]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[23e]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[a9]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ab]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[ad]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[af]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[23f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[240]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[241]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[242]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[243]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[244]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[245]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[246]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[247]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[248]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[249]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[24a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[24b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[24d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[24f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[250]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[251]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[252]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[253]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[254]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[255]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[256]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[257]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[258]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[259]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[25a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[25b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[25c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[25d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ba]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; kern_init &rArr; timer_lib_init &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[25e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bd]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[25f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bf]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[149]"></a>cpu_irq_save</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kern_port_cm3_ccarm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_isr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_error
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cancel
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_priority
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_unlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_lock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_join
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_IT
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_put
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_get
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_call
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_the
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_n
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_timer_tick
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_fork
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_put
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_stop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_next
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_last
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_add_song
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>

<P><STRONG><a name="[14c]"></a>cpu_irq_restore</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kern_port_cm3_ccarm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_isr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cancel
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_priority
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_unlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_lock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_join
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_IT
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_put
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_get
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_call
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_the
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_n
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_timer_tick
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_fork
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_put
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_stop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_next
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_last
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_add_song
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>

<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, kern_port_cm3_ccarm.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; task_switch_sp &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch_sp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, syscall.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; SVC_Handler_dispatch &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1fa]"></a>system_call</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscall_ccarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project1_main
</UL>

<P><STRONG><a name="[1fb]"></a>call_test</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscall_ccarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project1_main
</UL>

<P><STRONG><a name="[19e]"></a>fork</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscall_ccarm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fork_test_task
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set
</UL>

<P><STRONG><a name="[260]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
</UL>

<P><STRONG><a name="[c6]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_prj
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sleep
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_d
</UL>

<P><STRONG><a name="[226]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_name_match_wild
</UL>

<P><STRONG><a name="[19b]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_basename
</UL>

<P><STRONG><a name="[16d]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_to_rel_path
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blow
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_name_match_wild
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_basename
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete_internal
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_get
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_get
</UL>

<P><STRONG><a name="[193]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_to_rel_path
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find_best
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_find_cmd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete_internal
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_put
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[ca]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[261]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
</UL>

<P><STRONG><a name="[cc]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[262]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_fork
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_new
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_engine
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_execute
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[d1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d0]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_parse_and_exec_cmd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pclkx_doubler_get
</UL>

<P><STRONG><a name="[266]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d3]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete_internal
</UL>

<P><STRONG><a name="[1b3]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[268]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[26b]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[d7]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[d8]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d9]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[9a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[90]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[c4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[c5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[48]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[a2]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[df]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[9e]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[a6]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[e0]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a0]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[a8]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[92]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[db]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[c9]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ce]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[26f]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[271]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[de]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[272]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ed]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[ee]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[aa]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[ac]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ef]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ae]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[b0]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[e3]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[dd]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[b7]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ec]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e6]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bc]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[273]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f4]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[f3]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[f5]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f6]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e8]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e9]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f7]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_DMA_Abort</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_DMA_Init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[f9]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[10f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 766 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keys_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_ioctl
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k6_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k5_read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k4_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k3_read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
</UL>

<P><STRONG><a name="[139]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[104]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_button
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[13f]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_MspInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fc]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[186]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
</UL>

<P><STRONG><a name="[103]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pclkx_doubler_get
</UL>

<P><STRONG><a name="[107]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[106]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[108]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[105]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[109]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10b]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, kern_port_cm3.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = HAL_SYSTICK_Callback &rArr; timer_tick_isr &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10d]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = HAL_SYSTICK_IRQHandler &rArr; HAL_SYSTICK_Callback &rArr; timer_tick_isr &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[210]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_GenerateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_open
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_stop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_write
</UL>

<P><STRONG><a name="[121]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[11f]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[11b]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; uart_getc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_UART_MspInit</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_rx_DMA
</UL>

<P><STRONG><a name="[12c]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_rx_IT
</UL>

<P><STRONG><a name="[12e]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, project3_main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; uart_getc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_IT_ISR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_DMA_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[142]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[131]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blow
</UL>

<P><STRONG><a name="[133]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_DMA
</UL>

<P><STRONG><a name="[233]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_IT
</UL>

<P><STRONG><a name="[134]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, project3_main.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; uart_putc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_IT_ISR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_DMA_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[143]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>SVC_Handler_dispatch</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, syscall.o(i.SVC_Handler_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SVC_Handler_dispatch &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler &rArr; HAL_SYSTICK_Callback &rArr; timer_tick_isr &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>SystemClock_Config</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[119]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[112]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[12b]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[12d]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; uart_getc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[144]"></a>__kfifo_get</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, kfifo.o(i.__kfifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __kfifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_get
</UL>

<P><STRONG><a name="[145]"></a>__kfifo_put</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, kfifo.o(i.__kfifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __kfifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_put
</UL>

<P><STRONG><a name="[146]"></a>__task_wait</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, task.o(i.__task_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_in_irq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_timeout
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_join
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_IT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_DMA
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_IT
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_DMA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fork_test_task
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_task
</UL>

<P><STRONG><a name="[e1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[14f]"></a>app_main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_n103.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_main &rArr; lab_init &rArr; kshell_cmd_add
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_cmd_add
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>assert_fail</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, debug.o(i.assert_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_set
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_read
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ioctl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_close
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_to_rel_path
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cancel
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_remove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_tail
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_get_highest
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task_entry
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_unlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_lock
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch_sp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timeout_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_call
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_the
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_n
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_fork
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_ioctl
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pclkx_doubler_get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_ioctl
</UL>

<P><STRONG><a name="[77]"></a>audio_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, project4_main.o(i.audio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = audio_close &rArr; led_off &rArr; pin_write &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project4_main.o(i.player_init)
</UL>
<P><STRONG><a name="[78]"></a>audio_control</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, project4_main.o(i.audio_control))
<BR>[Address Reference Count : 1]<UL><LI> project4_main.o(i.player_init)
</UL>
<P><STRONG><a name="[75]"></a>audio_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, project4_main.o(i.audio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = audio_init &rArr; led_init &rArr; pin_mode &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project4_main.o(i.player_init)
</UL>
<P><STRONG><a name="[76]"></a>audio_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, project4_main.o(i.audio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = audio_open &rArr; led_on &rArr; pin_write &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project4_main.o(i.player_init)
</UL>
<P><STRONG><a name="[79]"></a>audio_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, project4_main.o(i.audio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = audio_write &rArr; beep_set &rArr; pwm_set &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project4_main.o(i.player_init)
</UL>
<P><STRONG><a name="[155]"></a>beep_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep.o(i.beep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[153]"></a>beep_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep.o(i.beep_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = beep_off &rArr; pwm_disable &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_close
</UL>

<P><STRONG><a name="[157]"></a>beep_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, beep.o(i.beep_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = beep_on &rArr; pwm_enable &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_write
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_open
</UL>

<P><STRONG><a name="[163]"></a>beep_player_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, project4_main.o(i.beep_player_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = beep_player_init &rArr; key_init &rArr; my_button_register &rArr; pin_mode &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_pwm_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_pin_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project4_main
</UL>

<P><STRONG><a name="[15a]"></a>beep_set</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, beep.o(i.beep_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = beep_set &rArr; pwm_set &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_write
</UL>

<P><STRONG><a name="[72]"></a>beep_song_decode_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, decode.o(i.beep_song_decode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = beep_song_decode_init &rArr; beep_song_decode_new_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_song_decode_new_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project4_main.o(i.player_init)
</UL>
<P><STRONG><a name="[16a]"></a>beep_song_get_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, decode.o(i.beep_song_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = beep_song_get_data &rArr; beep_song_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_song_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_read
</UL>

<P><STRONG><a name="[18f]"></a>beep_song_get_len</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, decode.o(i.beep_song_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_control
</UL>

<P><STRONG><a name="[18e]"></a>beep_song_get_name</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, decode.o(i.beep_song_get_name))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_control
</UL>

<P><STRONG><a name="[1a4]"></a>board_getc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, board_itm.o(i.board_getc))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc_default
</UL>

<P><STRONG><a name="[1a3]"></a>board_getc_ready</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_itm.o(i.board_getc_ready))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc_default
</UL>

<P><STRONG><a name="[171]"></a>board_putc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_itm.o(i.board_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_default
</UL>

<P><STRONG><a name="[173]"></a>board_putc_debug</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_itm.o(i.board_putc_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_putc_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_write
</UL>

<P><STRONG><a name="[69]"></a>btn_cb</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key.o(i.btn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = btn_cb &rArr; beep_key_press_long &rArr; player_control &rArr; player_next &rArr; player_play &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_key_press_short
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_key_press_long
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.key_init)
</UL>
<P><STRONG><a name="[174]"></a>button_register</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, button_scan.o(i.button_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = button_register &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_button_init
</UL>

<P><STRONG><a name="[175]"></a>button_scan_loop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button_scan.o(i.button_scan_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = button_scan_loop &rArr; process_buttons &rArr; generate_button_event &rArr; fire_event_if_not &rArr; fire_event &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_buttons
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_buttons
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_task
</UL>

<P><STRONG><a name="[c]"></a>cmd_help</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, kshell_cmd.o(i.cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = cmd_help &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kshell_cmd.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>cmd_reboot</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, kshell_cmd.o(i.cmd_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = cmd_reboot &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kshell_cmd.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>cmd_uartmode</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, project3_main.o(i.cmd_uartmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = cmd_uartmode &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project3_main.o(i.project3_main)
</UL>
<P><STRONG><a name="[147]"></a>cpu_in_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kern_port_cm3_ccarm.o(i.cpu_in_irq))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
</UL>

<P><STRONG><a name="[1a8]"></a>cpu_irq_disabled</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kern_port_cm3_ccarm.o(i.cpu_irq_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task_entry
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>

<P><STRONG><a name="[18b]"></a>cpu_schedule_pend</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, kern_port_cm3.o(i.cpu_schedule_pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cpu_schedule_pend
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_pendsv
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>

<P><STRONG><a name="[18d]"></a>cpu_task_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kern_port_cm3.o(i.cpu_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cpu_task_init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
</UL>

<P><STRONG><a name="[216]"></a>cpu_task_stack_prepair</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, kern_port_cm3.o(i.cpu_task_stack_prepair))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_task_stack_prepair
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[1e2]"></a>debug_irq_restore</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, debug.o(i.debug_irq_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[1df]"></a>debug_irq_save</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, debug.o(i.debug_irq_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>

<P><STRONG><a name="[73]"></a>decode_control</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, project4_main.o(i.decode_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_control
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_song_get_name
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_song_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project4_main.o(i.player_init)
</UL>
<P><STRONG><a name="[74]"></a>decode_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, project4_main.o(i.decode_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = decode_read &rArr; beep_song_get_data &rArr; beep_song_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_song_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project4_main.o(i.player_init)
</UL>
<P><STRONG><a name="[190]"></a>device_close</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ios_device.o(i.device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = device_close &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_close
</UL>

<P><STRONG><a name="[191]"></a>device_find</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ios_device.o(i.device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find_best
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_open
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
</UL>

<P><STRONG><a name="[194]"></a>device_ioctl</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ios_device.o(i.device_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = device_ioctl &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_ioctl
</UL>

<P><STRONG><a name="[195]"></a>device_open</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ios_device.o(i.device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = device_open &rArr; translate_to_rel_path &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_to_rel_path
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_open
</UL>

<P><STRONG><a name="[197]"></a>device_read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ios_device.o(i.device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = device_read &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_read
</UL>

<P><STRONG><a name="[198]"></a>device_register</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ios_device.o(i.device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = device_register &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_pwm_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_pin_init
</UL>

<P><STRONG><a name="[199]"></a>device_write</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ios_device.o(i.device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = device_write &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_write
</UL>

<P><STRONG><a name="[165]"></a>driver_pin_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pin_driver.o(i.driver_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = driver_pin_init &rArr; device_register &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_player_init
</UL>

<P><STRONG><a name="[164]"></a>driver_pwm_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pwm_driver.o(i.driver_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = driver_pwm_init &rArr; device_register &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_player_init
</UL>

<P><STRONG><a name="[1f8]"></a>exec_privilege_action</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, project1_main.o(i.exec_privilege_action))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_test_task
</UL>

<P><STRONG><a name="[7c]"></a>fork_test_task</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, project1_main.o(i.fork_test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = fork_test_task &rArr; __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_unlock
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_lock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project1_main.o(i.project1_main)
</UL>
<P><STRONG><a name="[1a2]"></a>generate_button_event</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, button_scan.o(i.generate_button_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = generate_button_event &rArr; fire_event_if_not &rArr; fire_event &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_event_if_not
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_event
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_buttons
</UL>

<P><STRONG><a name="[1a6]"></a>heap_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, heap.o(i.heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = heap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
</UL>

<P><STRONG><a name="[1a9]"></a>ios_device_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ios_device.o(i.ios_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ios_device_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
</UL>

<P><STRONG><a name="[17f]"></a>ios_fd_close</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ios_fd.o(i.ios_fd_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ios_fd_close &rArr; ios_fd_free &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_get_device
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_free
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_entry
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[1ac]"></a>ios_fd_free</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ios_fd.o(i.ios_fd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ios_fd_free &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_entry
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_open
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_close
</UL>

<P><STRONG><a name="[1ab]"></a>ios_fd_get_device</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ios_fd.o(i.ios_fd_get_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ios_fd_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_read
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_ioctl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_close
</UL>

<P><STRONG><a name="[1ad]"></a>ios_fd_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ios_fd.o(i.ios_fd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ios_fd_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
</UL>

<P><STRONG><a name="[1ae]"></a>ios_fd_ioctl</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ios_fd.o(i.ios_fd_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ios_fd_ioctl &rArr; device_ioctl &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_get_device
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_entry
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>

<P><STRONG><a name="[1af]"></a>ios_fd_new</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ios_fd.o(i.ios_fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ios_fd_new &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_set
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_open
</UL>

<P><STRONG><a name="[1b1]"></a>ios_fd_open</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ios_fd.o(i.ios_fd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_new
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_free
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[1b2]"></a>ios_fd_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ios_fd.o(i.ios_fd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ios_fd_read &rArr; device_read &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_get_device
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_entry
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
</UL>

<P><STRONG><a name="[1b0]"></a>ios_fd_set</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ios_fd.o(i.ios_fd_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ios_fd_set &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_entry
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_open
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_new
</UL>

<P><STRONG><a name="[1b4]"></a>ios_fd_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ios_fd.o(i.ios_fd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ios_fd_write &rArr; device_write &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_get_device
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_write
</UL>

<P><STRONG><a name="[1b5]"></a>k3_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio_ops.o(i.k3_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k3_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[1b7]"></a>k4_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio_ops.o(i.k4_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k4_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[1b8]"></a>k5_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio_ops.o(i.k5_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k5_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[1b9]"></a>k6_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio_ops.o(i.k6_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k6_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[1ba]"></a>kern_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kern_init.o(i.kern_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = kern_init &rArr; timer_lib_init &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_lib_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_lib_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_lib_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_test_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_device_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>kern_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kern_init.o(i.kern_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = kern_start &rArr; task_yield &rArr; task_schedule &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>kern_test</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, kern_test.o(i.kern_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = kern_test &rArr; ktest_run_test_suite &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_test_suite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(i.kern_test_init)
</UL>
<P><STRONG><a name="[1be]"></a>kern_test_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kern_test.o(i.kern_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = kern_test_init &rArr; kshell_cmd_add
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_cmd_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
</UL>

<P><STRONG><a name="[167]"></a>key_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, key.o(i.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = key_init &rArr; my_button_register &rArr; pin_mode &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_button_start
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_button_register
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_player_init
</UL>

<P><STRONG><a name="[178]"></a>keys_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gpio_ops.o(i.keys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = keys_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_task
</UL>

<P><STRONG><a name="[1c9]"></a>ksh_auto_complete_internal</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, kshell.o(i.ksh_auto_complete_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ksh_auto_complete_internal &rArr; cmd_help &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete
</UL>

<P><STRONG><a name="[181]"></a>ksh_printf</STRONG> (Thumb, 64 bytes, Stack size 160 bytes, kshell.o(i.ksh_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_prj
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mem
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sleep
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_i
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_d
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_execute
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_loop
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete_internal
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_show_history
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_execute_internal
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uartmode
</UL>

<P><STRONG><a name="[151]"></a>kshell_cmd_add</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kshell_cmd.o(i.kshell_cmd_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kshell_cmd_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_test_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project3_main
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lab_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1cf]"></a>kshell_config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, project3_main.o(i.kshell_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kshell_config
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_register
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project3_main
</UL>

<P><STRONG><a name="[1cd]"></a>kshell_find_cmd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, kshell_cmd.o(i.kshell_find_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kshell_find_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_parse_and_exec_cmd
</UL>

<P><STRONG><a name="[1d0]"></a>kshell_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, kshell.o(i.kshell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = kshell_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_lib_init
</UL>

<P><STRONG><a name="[1bd]"></a>kshell_lib_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kshell.o(i.kshell_lib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = kshell_lib_init &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
</UL>

<P><STRONG><a name="[1d1]"></a>kshell_loop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kshell.o(i.kshell_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = kshell_loop &rArr; shell_readline &rArr; ksh_auto_complete &rArr; ksh_auto_complete_internal &rArr; cmd_help &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_execute
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_task
</UL>

<P><STRONG><a name="[18a]"></a>kshell_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kshell.o(i.kshell_register))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uartmode
</UL>

<P><STRONG><a name="[1d4]"></a>ktest_assert</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ktest.o(i.ktest_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ktest_assert &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_basename
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test_task
</UL>

<P><STRONG><a name="[1c3]"></a>ktest_failed</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ktest.o(i.ktest_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ktest_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_result_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_testcase
</UL>

<P><STRONG><a name="[1d5]"></a>ktest_result_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ktest.o(i.ktest_result_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_failed
</UL>

<P><STRONG><a name="[1d7]"></a>ktest_run_test_case</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, ktest.o(i.ktest_run_test_case))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ktest_run_test_case &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_engine
</UL>

<P><STRONG><a name="[1c1]"></a>ktest_run_test_suite</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ktest.o(i.ktest_run_test_suite))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ktest_run_test_suite &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_suite_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_engine
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_test
</UL>

<P><STRONG><a name="[1c2]"></a>ktest_run_unit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ktest.o(i.ktest_run_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ktest_run_unit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_testcase
</UL>

<P><STRONG><a name="[1d8]"></a>ktest_suite_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ktest.o(i.ktest_suite_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ktest_suite_init &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_test_suite
</UL>

<P><STRONG><a name="[150]"></a>lab_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_n103.o(i.lab_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lab_init &rArr; kshell_cmd_add
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_cmd_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[156]"></a>led_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = led_init &rArr; pin_mode &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[154]"></a>led_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = led_off &rArr; pin_write &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_close
</UL>

<P><STRONG><a name="[158]"></a>led_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = led_on &rArr; pin_write &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_open
</UL>

<P><STRONG><a name="[1da]"></a>led_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio_ops.o(i.led_set))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_dimming
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
</UL>

<P><STRONG><a name="[159]"></a>led_toggle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(i.led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = led_toggle &rArr; pin_read &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_write
</UL>

<P><STRONG><a name="[1d9]"></a>leds_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gpio_ops.o(i.leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = leds_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
</UL>

<P><STRONG><a name="[bb]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = main &rArr; kern_init &rArr; timer_lib_init &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_start
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[187]"></a>ms_to_tick</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, timer.o(i.ms_to_tick))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_smoke
</UL>

<P><STRONG><a name="[14e]"></a>mutex_give</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, mutex.o(i.mutex_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_irq_save
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_irq_restore
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_priority
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_all
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_new
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find_best
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_consumer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adder_task
</UL>

<P><STRONG><a name="[1a7]"></a>mutex_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mutex.o(i.mutex_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_device_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test_task
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
</UL>

<P><STRONG><a name="[14d]"></a>mutex_take</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, mutex.o(i.mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mutex_take &rArr; __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_irq_save
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_irq_restore
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_priority
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_priority
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_in_irq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_new
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find_best
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_consumer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adder_task
</UL>

<P><STRONG><a name="[86]"></a>mutex_test_task</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, kern_test.o(i.mutex_test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mutex_test_task &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_oneshot
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_unlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_lock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_join
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(i.test_mutex)
</UL>
<P><STRONG><a name="[1c4]"></a>my_button_register</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, button.o(i.my_button_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = my_button_register &rArr; pin_mode &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[1c5]"></a>my_button_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, button.o(i.my_button_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = my_button_start &rArr; timer_add_period &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_period
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[1dc]"></a>pin_mode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pin_device.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = pin_mode &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_ioctl
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_button_register
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[1de]"></a>pin_read</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pin_device.o(i.pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = pin_read &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_button_scan
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>

<P><STRONG><a name="[1dd]"></a>pin_write</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, pin_device.o(i.pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = pin_write &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_write
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
</UL>

<P><STRONG><a name="[1ec]"></a>player_add_song</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, player.o(i.player_add_song))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = player_add_song
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
</UL>

<P><STRONG><a name="[15e]"></a>player_control</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, player.o(i.player_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = player_control &rArr; player_next &rArr; player_play &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_stop
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_next
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_last
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_key_press_short
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_key_press_long
</UL>

<P><STRONG><a name="[166]"></a>player_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, project4_main.o(i.player_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = player_init &rArr; player_control &rArr; player_next &rArr; player_play &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_start
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_add_song
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_show
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_player_init
</UL>

<P><STRONG><a name="[1ef]"></a>player_last</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, player.o(i.player_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = player_last &rArr; player_play &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>

<P><STRONG><a name="[1f0]"></a>player_next</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, player.o(i.player_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = player_next &rArr; player_play &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_entry
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>

<P><STRONG><a name="[1ed]"></a>player_play</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, player.o(i.player_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = player_play &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_next
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_last
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>

<P><STRONG><a name="[160]"></a>player_show</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, player.o(i.player_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = player_show &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_entry
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_key_press_short
</UL>

<P><STRONG><a name="[1f2]"></a>player_start</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, player.o(i.player_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = player_start &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_init
</UL>

<P><STRONG><a name="[1ee]"></a>player_stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, player.o(i.player_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = player_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>

<P><STRONG><a name="[177]"></a>process_buttons</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button_scan.o(i.process_buttons))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = process_buttons &rArr; generate_button_event &rArr; fire_event_if_not &rArr; fire_event &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_button_event
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_loop
</UL>

<P><STRONG><a name="[6]"></a>project1_main</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, project1_main.o(i.project1_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = project1_main &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_call
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>project2_main</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, project2_main.o(i.project2_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = project2_main &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>project3_main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, project3_main.o(i.project3_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = project3_main &rArr; kshell_cmd_add
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_cmd_add
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>project4_main</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, project4_main.o(i.project4_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = project4_main &rArr; beep_player_init &rArr; key_init &rArr; my_button_register &rArr; pin_mode &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_player_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(.data)
</UL>
<P><STRONG><a name="[161]"></a>pwm_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pwm_device.o(i.pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = pwm_disable &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_off
</UL>

<P><STRONG><a name="[162]"></a>pwm_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pwm_device.o(i.pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = pwm_enable &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_on
</UL>

<P><STRONG><a name="[15c]"></a>pwm_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm_device.o(i.pwm_init))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
</UL>

<P><STRONG><a name="[168]"></a>pwm_set</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, pwm_device.o(i.pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = pwm_set &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_ioctl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_set
</UL>

<P><STRONG><a name="[201]"></a>scan_button</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, button_scan.o(i.scan_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scan_button
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_buttons
</UL>

<P><STRONG><a name="[176]"></a>scan_buttons</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button_scan.o(i.scan_buttons))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scan_buttons &rArr; scan_button
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_button
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_loop
</UL>

<P><STRONG><a name="[1f3]"></a>sem_give</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, semaphore.o(i.sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_irq_save
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_irq_restore
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_all
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_producer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_play
</UL>

<P><STRONG><a name="[1f4]"></a>sem_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, semaphore.o(i.sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_start
</UL>

<P><STRONG><a name="[1f1]"></a>sem_take</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, semaphore.o(i.sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = sem_take &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_irq_save
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_irq_restore
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_timeout
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ticks
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_in_irq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_consumer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_entry
</UL>

<P><STRONG><a name="[1d2]"></a>shell_execute</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, kshell.o(i.shell_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = shell_execute &rArr; ksh_execute_internal &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_execute_internal
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_loop
</UL>

<P><STRONG><a name="[5c]"></a>stm32_pin_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pin_driver.o(i.stm32_pin_close))
<BR>[Address Reference Count : 1]<UL><LI> pin_driver.o(i.driver_pin_init)
</UL>
<P><STRONG><a name="[52]"></a>stop_smoke</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_n103.o(i.stop_smoke))
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(i.cmd_smoke)
</UL>
<P><STRONG><a name="[8a]"></a>sys_call_test</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, syscall.o(i.sys_call_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sys_call_test &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syscall.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>sys_fork</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, syscall.o(i.sys_fork))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sys_fork &rArr; task_fork &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_fork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syscall.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>sys_system_call</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, syscall.o(i.sys_system_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_system_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syscall.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>syscall_pendsv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kern_port_cm3.o(i.syscall_pendsv))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_schedule_pend
</UL>

<P><STRONG><a name="[185]"></a>task_create</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, task.o(i.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stack_prepair
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_lib_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_lib_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_lib_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project2_main
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project1_main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_smoke
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_prj
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_test_suite
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test_task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mutex
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_start
</UL>

<P><STRONG><a name="[217]"></a>task_delete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, task.o(i.task_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = task_delete &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_all
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_put
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_guard
</UL>

<P><STRONG><a name="[212]"></a>task_fork</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, task.o(i.task_fork))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = task_fork &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_new
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_fork
</UL>

<P><STRONG><a name="[219]"></a>task_info</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, task.o(i.task_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_info &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_info_all
</UL>

<P><STRONG><a name="[184]"></a>task_info_all</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, task.o(i.task_info_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = task_info_all &rArr; task_info &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_info
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_i
</UL>

<P><STRONG><a name="[21a]"></a>task_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, task.o(i.task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = task_init &rArr; task_pool_init &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_queue_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_lib_init
</UL>

<P><STRONG><a name="[1e4]"></a>task_join</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, task.o(i.task_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = task_join &rArr; __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test_task
</UL>

<P><STRONG><a name="[1bb]"></a>task_lib_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task.o(i.task_lib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = task_lib_init &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
</UL>

<P><STRONG><a name="[19f]"></a>task_lock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, task.o(i.task_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = task_lock &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test_task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fork_test_task
</UL>

<P><STRONG><a name="[1e3]"></a>task_priority</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, task.o(i.task_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = task_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
</UL>

<P><STRONG><a name="[1a0]"></a>task_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task.o(i.task_self))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_priority
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_priority
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_timeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_producer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_consumer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fork_test_task
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_info
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[1e0]"></a>task_set_priority</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, task.o(i.task_set_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = task_set_priority &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_remove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_tail
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
</UL>

<P><STRONG><a name="[15b]"></a>task_sleep</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer.o(i.task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_timeout
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blow
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sleep
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc_default
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_poll
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_poll
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_dimming
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_task
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_test_task
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_write
</UL>

<P><STRONG><a name="[221]"></a>task_switch_context_hook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task.o(i.task_switch_context_hook))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch_sp
</UL>

<P><STRONG><a name="[c1]"></a>task_switch_sp</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, task.o(i.task_switch_sp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = task_switch_sp &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redzone_check
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_next_rt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch_context_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[222]"></a>task_timer_tick</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, task.o(i.task_timer_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_timer_tick &rArr; task_schedule &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_isr
</UL>

<P><STRONG><a name="[1a1]"></a>task_unlock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, task.o(i.task_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_unlock &rArr; task_schedule &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test_task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fork_test_task
</UL>

<P><STRONG><a name="[203]"></a>task_wait_timeout</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, timer.o(i.task_wait_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cancel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_oneshot
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ticks
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
</UL>

<P><STRONG><a name="[223]"></a>task_wakeup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(i.task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_n
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_isr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_IT_ISR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_DMA_ISR
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_IT_ISR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_DMA_ISR
</UL>

<P><STRONG><a name="[1e1]"></a>task_wakeup_all</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, task.o(i.task_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_n
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[224]"></a>task_wakeup_n</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, task.o(i.task_wakeup_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_all
</UL>

<P><STRONG><a name="[225]"></a>task_wakeup_the</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, task.o(i.task_wakeup_the))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = task_wakeup_the &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timeout_handler
</UL>

<P><STRONG><a name="[1c0]"></a>task_yield</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, task.o(i.task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = task_yield &rArr; task_schedule &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_in_irq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
</UL>

<P><STRONG><a name="[189]"></a>timer_add_oneshot</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timer.o(i.timer_add_oneshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_smoke
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_timeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test_task
</UL>

<P><STRONG><a name="[1e5]"></a>timer_add_period</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timer.o(i.timer_add_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = timer_add_period &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_button_start
</UL>

<P><STRONG><a name="[209]"></a>timer_cancel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, timer.o(i.timer_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_timeout
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
</UL>

<P><STRONG><a name="[188]"></a>timer_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_smoke
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_timeout
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_test_task
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_button_start
</UL>

<P><STRONG><a name="[1bc]"></a>timer_lib_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, timer.o(i.timer_lib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = timer_lib_init &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
</UL>

<P><STRONG><a name="[10c]"></a>timer_tick_isr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, timer.o(i.timer_tick_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = timer_tick_isr &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[183]"></a>timer_ticks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.timer_ticks))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wait_timeout
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sleep
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_i
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
</UL>

<P><STRONG><a name="[7b]"></a>trace_printf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, board_itm.o(i.trace_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_error
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_start
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kern_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_register
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project1_main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_list
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_get
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redzone_check
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_remove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_tail
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_suite_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_test_case
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_engine
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_info_all
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_assert
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_producer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_consumer
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_button_scan
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_register
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_event
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_call_test
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_dispatch
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fork_test_task
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_test_task
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_insert
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_info
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_queue_remove
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_queue_insert_tail
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_put
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project1_main.o(i.project1_main)
</UL>
<P><STRONG><a name="[49]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_start
</UL>

<P><STRONG><a name="[234]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[227]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_start
</UL>

<P><STRONG><a name="[276]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[228]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_start
</UL>

<P><STRONG><a name="[236]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[235]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[237]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[94]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[98]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16c]"></a>blow</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, app_n103.o(i.blow))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = blow &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_stop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
</UL>

<P><STRONG><a name="[17a]"></a>check_gpio</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_n103.o(i.check_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_gpio &rArr; gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
</UL>

<P><STRONG><a name="[17d]"></a>check_tim</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_n103.o(i.check_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = check_tim &rArr; tim_pwm_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_stop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_start
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
</UL>

<P><STRONG><a name="[208]"></a>check_uart</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_n103.o(i.check_uart))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
</UL>

<P><STRONG><a name="[6e]"></a>cmd_prj</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, app_n103.o(i.cmd_prj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = cmd_prj &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_list
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(i.lab_init)
</UL>
<P><STRONG><a name="[51]"></a>cmd_smoke</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_n103.o(i.cmd_smoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = cmd_smoke &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_oneshot
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_to_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(i.app_main)
</UL>
<P><STRONG><a name="[16e]"></a>gpio_clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_n103.o(i.gpio_clr))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blow
</UL>

<P><STRONG><a name="[17b]"></a>gpio_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_n103.o(i.gpio_read))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tim
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gpio
</UL>

<P><STRONG><a name="[1a5]"></a>gpio_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_n103.o(i.gpio_set))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>

<P><STRONG><a name="[17c]"></a>gpio_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_n103.o(i.gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gpio
</UL>

<P><STRONG><a name="[5]"></a>project_list</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_n103.o(i.project_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = project_list &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_prj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>smoke_task</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, app_n103.o(i.smoke_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = smoke_task &rArr; blow &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cancel
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tim
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gpio
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_n103.o(i.cmd_smoke)
</UL>
<P><STRONG><a name="[16f]"></a>tim_pwm_start</STRONG> (Thumb, 110 bytes, Stack size 104 bytes, app_n103.o(i.tim_pwm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tim_pwm_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tim
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blow
</UL>

<P><STRONG><a name="[170]"></a>tim_pwm_stop</STRONG> (Thumb, 22 bytes, Stack size 88 bytes, app_n103.o(i.tim_pwm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tim_pwm_stop &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoke_task
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_tim
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blow
</UL>

<P><STRONG><a name="[172]"></a>ITM_SendChar</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, board_itm.o(i.ITM_SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_putc_debug
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_putc
</UL>

<P><STRONG><a name="[22e]"></a>trace_write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, board_itm.o(i.trace_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = trace_write &rArr; board_putc_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_putc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>

<P><STRONG><a name="[192]"></a>device_find_best</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ios_device.o(i.device_find_best))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
</UL>

<P><STRONG><a name="[196]"></a>translate_to_rel_path</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ios_device.o(i.translate_to_rel_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = translate_to_rel_path &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open
</UL>

<P><STRONG><a name="[1aa]"></a>fd_entry</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ios_fd.o(i.fd_entry))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_write
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_read
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_ioctl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_get_device
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_free
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_close
</UL>

<P><STRONG><a name="[5a]"></a>task_error</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kern_port_cm3.o(i.task_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = task_error &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_port_cm3.o(i.cpu_task_stack_prepair)
</UL>
<P><STRONG><a name="[6f]"></a>adder_task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kern_test.o(i.adder_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = adder_task &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(i.mutex_test_task)
</UL>
<P><STRONG><a name="[152]"></a>atomic_add</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, kern_test.o(i.atomic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atomic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_consumer
</UL>

<P><STRONG><a name="[b]"></a>kern_testcase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kern_test.o(i.kern_testcase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kern_testcase &rArr; ktest_run_unit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_unit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(.data)
</UL>
<P><STRONG><a name="[202]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kern_test.o(i.rand))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_consumer
</UL>

<P><STRONG><a name="[81]"></a>sem_consumer</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, kern_test.o(i.sem_consumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = sem_consumer &rArr; sem_take &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(i.sem_test)
</UL>
<P><STRONG><a name="[82]"></a>sem_producer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, kern_test.o(i.sem_producer))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = sem_producer &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_self
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(i.sem_test)
</UL>
<P><STRONG><a name="[204]"></a>sem_test</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, kern_test.o(i.sem_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sem_test &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_take
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_give
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sem
</UL>

<P><STRONG><a name="[70]"></a>stop_task</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kern_test.o(i.stop_task))
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(i.mutex_test_task)
</UL>
<P><STRONG><a name="[65]"></a>test_mutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kern_test.o(i.test_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = test_mutex &rArr; task_create &rArr; task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(i.kern_testcase)
</UL>
<P><STRONG><a name="[66]"></a>test_sem</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, kern_test.o(i.test_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = test_sem &rArr; sem_test &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(i.kern_testcase)
</UL>
<P><STRONG><a name="[a]"></a>unit_test_noop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kern_test.o(i.unit_test_noop))
<BR>[Address Reference Count : 1]<UL><LI> kern_test.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>getc_default</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kshell.o(i.getc_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = getc_default &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_getc_ready
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_getc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kshell.o(i.kshell_lib_init)
</UL>
<P><STRONG><a name="[1c8]"></a>ksh_auto_complete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kshell.o(i.ksh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ksh_auto_complete &rArr; ksh_auto_complete_internal &rArr; cmd_help &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
</UL>

<P><STRONG><a name="[1cb]"></a>ksh_execute_internal</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, kshell.o(i.ksh_execute_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ksh_execute_internal &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_parse_and_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_execute
</UL>

<P><STRONG><a name="[1cc]"></a>ksh_parse_and_exec_cmd</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, kshell.o(i.ksh_parse_and_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ksh_parse_and_exec_cmd &rArr; kshell_find_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_find_cmd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_split_cmdline
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_execute_internal
</UL>

<P><STRONG><a name="[1ce]"></a>ksh_split_cmdline</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, kshell.o(i.ksh_split_cmdline))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ksh_split_cmdline
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_parse_and_exec_cmd
</UL>

<P><STRONG><a name="[6c]"></a>kshell_task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, kshell.o(i.kshell_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = kshell_task &rArr; kshell_loop &rArr; shell_readline &rArr; ksh_auto_complete &rArr; ksh_auto_complete_internal &rArr; cmd_help &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kshell.o(i.kshell_lib_init)
</UL>
<P><STRONG><a name="[6a]"></a>putc_default</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, kshell.o(i.putc_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = putc_default &rArr; board_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kshell.o(i.kshell_lib_init)
</UL>
<P><STRONG><a name="[205]"></a>shell_push_history</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, kshell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_push_history &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
</UL>

<P><STRONG><a name="[1d3]"></a>shell_readline</STRONG> (Thumb, 624 bytes, Stack size 24 bytes, kshell.o(i.shell_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = shell_readline &rArr; ksh_auto_complete &rArr; ksh_auto_complete_internal &rArr; cmd_help &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_show_history
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kshell_loop
</UL>

<P><STRONG><a name="[206]"></a>shell_show_history</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kshell.o(i.shell_show_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = shell_show_history &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_readline
</UL>

<P><STRONG><a name="[1ca]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kshell.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_auto_complete_internal
</UL>

<P><STRONG><a name="[d]"></a>cmd_d</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, kshell_cmd.o(i.cmd_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = cmd_d &rArr; display_mem &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mem
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kshell_cmd.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>cmd_i</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, kshell_cmd.o(i.cmd_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = cmd_i &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ticks
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_info_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kshell_cmd.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>cmd_sleep</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, kshell_cmd.o(i.cmd_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = cmd_sleep &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ticks
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kshell_cmd.o(.data)
</UL>
<P><STRONG><a name="[182]"></a>display_mem</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, kshell_cmd.o(i.display_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = display_mem &rArr; ksh_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ksh_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_d
</UL>

<P><STRONG><a name="[19a]"></a>file_basename</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ktest.o(i.file_basename))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = file_basename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_assert
</UL>

<P><STRONG><a name="[6d]"></a>ktest_run_engine</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, ktest.o(i.ktest_run_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ktest_run_engine &rArr; ktest_run_test_case &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_test_case
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_name_match_wild
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_test_suite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ktest.o(i.ktest_run_test_suite)
</UL>
<P><STRONG><a name="[1d6]"></a>test_name_match_wild</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ktest.o(i.test_name_match_wild))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test_name_match_wild &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktest_run_engine
</UL>

<P><STRONG><a name="[1fd]"></a>fls32</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, task.o(i.fls32))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_get_highest
</UL>

<P><STRONG><a name="[84]"></a>idle_task_entry</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, task.o(i.idle_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = idle_task_entry &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(i.task_lib_init)
</UL>
<P><STRONG><a name="[1ea]"></a>pick_next_rt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, task.o(i.pick_next_rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pick_next_rt &rArr; ready_queue_get_highest &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_get_highest
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch_sp
</UL>

<P><STRONG><a name="[1eb]"></a>ready_queue_get_highest</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, task.o(i.ready_queue_get_highest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ready_queue_get_highest &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fls32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_next_rt
</UL>

<P><STRONG><a name="[21b]"></a>ready_queue_init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, task.o(i.ready_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[1fe]"></a>ready_queue_insert_tail</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, task.o(i.ready_queue_insert_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ready_queue_insert_tail &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_priority
</UL>

<P><STRONG><a name="[1ff]"></a>ready_queue_remove</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, task.o(i.ready_queue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_priority
</UL>

<P><STRONG><a name="[200]"></a>redzone_check</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, task.o(i.redzone_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = redzone_check &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch_sp
</UL>

<P><STRONG><a name="[220]"></a>redzone_fill</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task.o(i.redzone_fill))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_new
</UL>

<P><STRONG><a name="[14a]"></a>task_change_state_to</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, task.o(i.task_change_state_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_remove
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_tail
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_disabled
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_queue_remove
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_queue_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch_sp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_the
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_n
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_fork
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[83]"></a>task_guard</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, task.o(i.task_guard))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = task_guard &rArr; task_delete &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(i.task_create)
</UL>
<P><STRONG><a name="[215]"></a>task_new</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, task.o(i.task_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = task_new &rArr; task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pool_get
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redzone_fill
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_copy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_fork
</UL>

<P><STRONG><a name="[21e]"></a>task_pool_get</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, task.o(i.task_pool_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = task_pool_get &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_new
</UL>

<P><STRONG><a name="[21d]"></a>task_pool_init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, task.o(i.task_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = task_pool_init &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[218]"></a>task_pool_put</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, task.o(i.task_pool_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = task_pool_put &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[14b]"></a>task_schedule</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, task.o(i.task_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = task_schedule &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_schedule_pend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_yield
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_set_priority
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_unlock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_the
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_n
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_timer_tick
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_delete
</UL>

<P><STRONG><a name="[21f]"></a>tls_copy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, task.o(i.tls_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_new
</UL>

<P><STRONG><a name="[21c]"></a>wait_queue_init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, task.o(i.wait_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[213]"></a>wait_queue_insert_tail</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, task.o(i.wait_queue_insert_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wait_queue_insert_tail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
</UL>

<P><STRONG><a name="[214]"></a>wait_queue_remove</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, task.o(i.wait_queue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = wait_queue_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_change_state_to
</UL>

<P><STRONG><a name="[22a]"></a>timer_add</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, timer.o(i.timer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cancel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_ticks
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_oneshot
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_period
</UL>

<P><STRONG><a name="[22b]"></a>timer_insert</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, timer.o(i.timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = timer_insert &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_call
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add
</UL>

<P><STRONG><a name="[22c]"></a>timer_remove</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, timer.o(i.timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cancel
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_call
</UL>

<P><STRONG><a name="[22d]"></a>timer_tick_call</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, timer.o(i.timer_tick_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = timer_tick_call &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remove
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_task
</UL>

<P><STRONG><a name="[87]"></a>timer_tick_task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(i.timer_tick_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = timer_tick_task &rArr; __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick_call
</UL>
<BR>[Address Reference Count : 3]<UL><LI> timer.o(i.timer_lib_init)
<LI> timer.o(i.timer_tick_isr)
<LI> timer.o(i.timer_tick_task)
</UL>
<P><STRONG><a name="[85]"></a>wait_timeout_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.wait_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = wait_timeout_handler &rArr; task_wakeup_the &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup_the
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.task_wait_timeout)
</UL>
<P><STRONG><a name="[1f5]"></a>__get_CONTROL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, project1_main.o(i.__get_CONTROL))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_user_mode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_privileged_mode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_test_task
</UL>

<P><STRONG><a name="[211]"></a>__set_CONTROL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, project1_main.o(i.__set_CONTROL))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_user_mode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_privileged_mode
</UL>

<P><STRONG><a name="[7d]"></a>priv_test_task</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, project1_main.o(i.priv_test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = priv_test_task &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_privilege_action
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_user_mode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_privileged_mode
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project1_main.o(i.project1_main)
</UL>
<P><STRONG><a name="[1f7]"></a>switch_to_privileged_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, project1_main.o(i.switch_to_privileged_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = switch_to_privileged_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_CONTROL
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_test_task
</UL>

<P><STRONG><a name="[1f6]"></a>switch_to_user_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, project1_main.o(i.switch_to_user_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = switch_to_user_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_CONTROL
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priv_test_task
</UL>

<P><STRONG><a name="[19c]"></a>fire_event</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, button_scan.o(i.fire_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = fire_event &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_button_event
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_event_if_not
</UL>

<P><STRONG><a name="[19d]"></a>fire_event_if_not</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, button_scan.o(i.fire_event_if_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fire_event_if_not &rArr; fire_event &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_button_event
</UL>

<P><STRONG><a name="[1f9]"></a>button_event_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, project2_main.o(i.button_event_read))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_event
</UL>

<P><STRONG><a name="[7e]"></a>button_scan_task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, project2_main.o(i.button_scan_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = button_scan_task &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_button_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keys_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project2_main.o(i.project2_main)
</UL>
<P><STRONG><a name="[179]"></a>key_button_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, project2_main.o(i.key_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = key_button_init &rArr; button_register &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scan_task
</UL>

<P><STRONG><a name="[7f]"></a>led_blink_task</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, project2_main.o(i.led_blink_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = led_blink_task &rArr; led_dimming &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_dimming
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project2_main.o(i.project2_main)
</UL>
<P><STRONG><a name="[1db]"></a>led_dimming</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, project2_main.o(i.led_dimming))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = led_dimming &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink_task
</UL>

<P><STRONG><a name="[67]"></a>process_event</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, project2_main.o(i.process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = process_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project2_main.o(i.key_button_init)
</UL>
<P><STRONG><a name="[68]"></a>read_key</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, project2_main.o(i.read_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = read_key &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k6_read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k5_read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k4_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k3_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> project2_main.o(i.key_button_init)
</UL>
<P><STRONG><a name="[1c6]"></a>kfifo_get</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, project3_main.o(i.kfifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = kfifo_get &rArr; __kfifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_IT
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_DMA
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_IT
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_DMA
</UL>

<P><STRONG><a name="[1c7]"></a>kfifo_put</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, project3_main.o(i.kfifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = kfifo_put &rArr; __kfifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_IT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_DMA
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_IT_ISR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_DMA_ISR
</UL>

<P><STRONG><a name="[59]"></a>uart_getc_DMA</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, project3_main.o(i.uart_getc_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uart_getc_DMA &rArr; __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_rx_DMA
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> project3_main.o(i.kshell_config)
<LI> project3_main.o(i.cmd_uartmode)
</UL>
<P><STRONG><a name="[130]"></a>uart_getc_DMA_ISR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, project3_main.o(i.uart_getc_DMA_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uart_getc_DMA_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_rx_DMA
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[57]"></a>uart_getc_IT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, project3_main.o(i.uart_getc_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uart_getc_IT &rArr; __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_rx_IT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> project3_main.o(i.kshell_config)
<LI> project3_main.o(i.cmd_uartmode)
</UL>
<P><STRONG><a name="[12f]"></a>uart_getc_IT_ISR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, project3_main.o(i.uart_getc_IT_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uart_getc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_rx_IT
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[55]"></a>uart_getc_poll</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, project3_main.o(i.uart_getc_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = uart_getc_poll &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
</UL>
<BR>[Address Reference Count : 2]<UL><LI> project3_main.o(i.kshell_config)
<LI> project3_main.o(i.cmd_uartmode)
</UL>
<P><STRONG><a name="[58]"></a>uart_putc_DMA</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, project3_main.o(i.uart_putc_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uart_putc_DMA &rArr; __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_DMA
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_put
</UL>
<BR>[Address Reference Count : 2]<UL><LI> project3_main.o(i.kshell_config)
<LI> project3_main.o(i.cmd_uartmode)
</UL>
<P><STRONG><a name="[136]"></a>uart_putc_DMA_ISR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, project3_main.o(i.uart_putc_DMA_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uart_putc_DMA_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[56]"></a>uart_putc_IT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, project3_main.o(i.uart_putc_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uart_putc_IT &rArr; __task_wait &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_wait
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_IT
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_put
</UL>
<BR>[Address Reference Count : 2]<UL><LI> project3_main.o(i.kshell_config)
<LI> project3_main.o(i.cmd_uartmode)
</UL>
<P><STRONG><a name="[135]"></a>uart_putc_IT_ISR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, project3_main.o(i.uart_putc_IT_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uart_putc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_wakeup
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_start_tx_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[54]"></a>uart_putc_poll</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, project3_main.o(i.uart_putc_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = uart_putc_poll &rArr; task_sleep &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_sleep
</UL>
<BR>[Address Reference Count : 2]<UL><LI> project3_main.o(i.kshell_config)
<LI> project3_main.o(i.cmd_uartmode)
</UL>
<P><STRONG><a name="[22f]"></a>uart_start_rx_DMA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, project3_main.o(i.uart_start_rx_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uart_start_rx_DMA &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_DMA_ISR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_DMA
</UL>

<P><STRONG><a name="[230]"></a>uart_start_rx_IT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, project3_main.o(i.uart_start_rx_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_start_rx_IT &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_IT_ISR
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_IT
</UL>

<P><STRONG><a name="[231]"></a>uart_start_tx_DMA</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, project3_main.o(i.uart_start_tx_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_start_tx_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_DMA_ISR
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_DMA
</UL>

<P><STRONG><a name="[232]"></a>uart_start_tx_IT</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, project3_main.o(i.uart_start_tx_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_start_tx_IT &rArr; kfifo_get &rArr; __kfifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_save
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_restore
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_IT_ISR
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_IT
</UL>

<P><STRONG><a name="[71]"></a>my_button_scan</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, button.o(i.my_button_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = my_button_scan &rArr; pin_read &rArr; open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_printf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.my_button_start)
</UL>
<P><STRONG><a name="[16b]"></a>beep_song_decode</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, decode.o(i.beep_song_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = beep_song_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_song_get_data
</UL>

<P><STRONG><a name="[169]"></a>beep_song_decode_new_freq</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, decode.o(i.beep_song_decode_new_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = beep_song_decode_new_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_song_decode_init
</UL>

<P><STRONG><a name="[15d]"></a>beep_key_press_long</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, key.o(i.beep_key_press_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = beep_key_press_long &rArr; player_control &rArr; player_next &rArr; player_play &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_cb
</UL>

<P><STRONG><a name="[15f]"></a>beep_key_press_short</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, key.o(i.beep_key_press_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = beep_key_press_short &rArr; player_control &rArr; player_next &rArr; player_play &rArr; sem_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_show
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_control
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_cb
</UL>

<P><STRONG><a name="[17e]"></a>close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pin_device.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = close &rArr; ios_fd_close &rArr; ios_fd_free &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_write
</UL>

<P><STRONG><a name="[1e6]"></a>open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pin_device.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_read
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_write
</UL>

<P><STRONG><a name="[20b]"></a>get_file_name</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pin_driver.o(i.get_file_name))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_get
</UL>

<P><STRONG><a name="[20a]"></a>stm32_pin_get</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, pin_driver.o(i.stm32_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_pin_get &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_open
</UL>

<P><STRONG><a name="[5f]"></a>stm32_pin_ioctl</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, pin_driver.o(i.stm32_pin_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = stm32_pin_ioctl &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin_driver.o(i.driver_pin_init)
</UL>
<P><STRONG><a name="[5b]"></a>stm32_pin_open</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, pin_driver.o(i.stm32_pin_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stm32_pin_open &rArr; stm32_pin_get &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin_driver.o(i.driver_pin_init)
</UL>
<P><STRONG><a name="[5d]"></a>stm32_pin_read</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, pin_driver.o(i.stm32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = stm32_pin_read &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin_driver.o(i.driver_pin_init)
</UL>
<P><STRONG><a name="[5e]"></a>stm32_pin_write</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, pin_driver.o(i.stm32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = stm32_pin_write &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin_driver.o(i.driver_pin_init)
</UL>
<P><STRONG><a name="[7a]"></a>player_entry</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, player.o(i.player_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = player_entry &rArr; sem_take &rArr; task_wait_timeout &rArr; timer_add_oneshot &rArr; timer_add &rArr; timer_cancel &rArr; timer_remove &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_take
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_next
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;player_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> player.o(i.player_start)
</UL>
<P><STRONG><a name="[180]"></a>close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pwm_device.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = close &rArr; ios_fd_close &rArr; ios_fd_free &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_close
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>

<P><STRONG><a name="[1e7]"></a>open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pwm_device.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = open &rArr; ios_fd_open &rArr; device_find &rArr; device_find_best &rArr; mutex_give &rArr; task_wakeup_all &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_open
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>

<P><STRONG><a name="[1fc]"></a>write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pwm_device.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = write &rArr; ios_fd_write &rArr; device_write &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ios_fd_write
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>

<P><STRONG><a name="[20d]"></a>get_file_name</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pwm_driver.o(i.get_file_name))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_get
</UL>

<P><STRONG><a name="[1e8]"></a>pclkx_doubler_get</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, pwm_driver.o(i.pclkx_doubler_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pclkx_doubler_get &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set
</UL>

<P><STRONG><a name="[62]"></a>stm32_pwm_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm_driver.o(i.stm32_pwm_close))
<BR>[Address Reference Count : 1]<UL><LI> pwm_driver.o(i.driver_pwm_init)
</UL>
<P><STRONG><a name="[20c]"></a>stm32_pwm_get</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, pwm_driver.o(i.stm32_pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_pwm_get &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_open
</UL>

<P><STRONG><a name="[63]"></a>stm32_pwm_ioctl</STRONG> (Thumb, 92 bytes, Stack size 112 bytes, pwm_driver.o(i.stm32_pwm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = stm32_pwm_ioctl &rArr; stm32_pwm_set &rArr; pclkx_doubler_get &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_driver.o(i.driver_pwm_init)
</UL>
<P><STRONG><a name="[60]"></a>stm32_pwm_open</STRONG> (Thumb, 96 bytes, Stack size 104 bytes, pwm_driver.o(i.stm32_pwm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stm32_pwm_open &rArr; stm32_pwm_get &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_driver.o(i.driver_pwm_init)
</UL>
<P><STRONG><a name="[20e]"></a>stm32_pwm_set</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, pwm_driver.o(i.stm32_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = stm32_pwm_set &rArr; pclkx_doubler_get &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_GenerateEvent
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pclkx_doubler_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_ioctl
</UL>

<P><STRONG><a name="[61]"></a>stm32_pwm_write</STRONG> (Thumb, 92 bytes, Stack size 104 bytes, pwm_driver.o(i.stm32_pwm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = stm32_pwm_write &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_fail
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm_driver.o(i.driver_pwm_init)
</UL>
<P><STRONG><a name="[137]"></a>MX_DMA_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>MX_GPIO_Init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>MX_TIM2_Init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[113]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[114]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[10a]"></a>RCC_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[fa]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[101]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[102]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[4b]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[4e]"></a>UART_DMAError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
<LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[4f]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; uart_getc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[50]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[4c]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; uart_putc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[4d]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[11d]"></a>UART_EndRxTransfer</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[123]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; uart_putc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>UART_EndTxTransfer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[11c]"></a>UART_Receive_IT</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; uart_getc_IT_ISR &rArr; task_wakeup &rArr; task_wakeup_n &rArr; task_change_state_to &rArr; ready_queue_remove &rArr; assert_fail &rArr; trace_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>UART_SetConfig</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[122]"></a>UART_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[4a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
